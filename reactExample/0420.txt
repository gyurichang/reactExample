3장 요약
3-1. 클래스형 컴포넌트

컴포넌트를 선언하는 방식
1. 함수 컴포넌트
	
	장점
	- 클래스형 컴포넌트보다 선언하기 쉬움
	- 메모리 자원도 클래스형 컴포넌트보다 적게 사용함
	- 결과물의 파일 크기가 더 작음
	
	단점
	- state와 라이프사이클 API의 사용이 불가함 (but, Hooks 기능이 도입 되면서 해결됨)
2. 클래스형 컴포넌트
	- state 기능 및 라이프사이클 기능 사용 가능
	- 임의 메서드 정의 가능
	- render 함수가 반드시 있어야 하고, render 함수 안에서 보여줘야 할 JSX를 반환해야 함
	
3.2 모듈 내보내기 및 불러오기

모듈 내보내기(export): 코드의 맨 아래에 작성, 다른 파일에서 해당 파일을 import 할 때, 선언한 클래스를 불러 오도록 설정함
모듈 불러오기(import): 설정한 컴포넌트를 불러와서 사용할 수 있게 해 줌

3.3 props

props
- properties를 줄인 표현
- 컴포넌트 속성을 설정할 때 사용함
- 불러오고자 하는 컴포넌트를 불러와 사용하는 부모 컴포넌트에서 설정할 수 있음

defaultProps
- props 값을 따로 지정하지 않았을 때 보여 줄 기본 값 설정

children
- 리액트 컴포넌트를 사용할 때 컴포넌트 태그 사이의 사용을 보여주는 props

비구조화 할당(구조 분해 문법)
- 객체에서 값을 추출하는 문법
- 함수의 파라미터 부분에서도 사용 가능

propTypes
- 컴포넌트의 필수 props를 지정하거나 props의 type을 지정할 때 사용
- propTypes를 사용하려면 import를 사용해야 함

isRequried
- propTypes를 지정하지 않았을 때 경고 메시지를 띄울 수 있도록 함
- 필수 값 지정

ex)
MyComponents.propTypes = {
	name: PropTypes.string,
	favoriteNumber: PropTypes.number.isRequried
};

